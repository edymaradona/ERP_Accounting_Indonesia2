<?php

class cronCommand extends CConsoleCommand
{

    private $_indexFiles = 'runtime.search';

    public function actionIndex()
    {
        $connection = Yii::app()->db;
        $sqlRaw = "select * from g_person limit 10";
        $rawData = Yii::app()->db->createCommand($sqlRaw)->queryAll();
        $dataProvider = new CArrayDataProvider($rawData, []);
        foreach ($dataProvider->getData() as $data) {
            $sql = "insert into z_ar_log 
			(description, action, model, idModel, userid) VALUES 
			('" . $data['employee_name'] . "','INSERT','gLeave',1,1)";
            $command = $connection->createCommand($sql)->execute();
        }
    }

    public function actionDeleteUserRegistrationExpire()
    { //request more than 30 days
        $connection = Yii::app()->db;
        $sqlRaw = "DELETE FROM s_user_registration WHERE status_id = 1 AND registration_date < " . strtotime("-30 day");
        Yii::app()->db->createCommand($sqlRaw)->execute();
        $sqlRaw2 = "DELETE FROM `s_user_registration` WHERE id NOT IN (select id from h_applicant) AND registration_date < " . strtotime("-30 day");
        Yii::app()->db->createCommand($sqlRaw2)->execute();
    }

    public function actionUpdateVacancyApplicantExpire()
    { //request more than 30 days move to Reference
        $connection = Yii::app()->db;
        $sqlRaw = "UPDATE h_vacancy_applicant SET status_id = 2 where status_id = 1 AND created_date < " . strtotime("-5 day");
        Yii::app()->db->createCommand($sqlRaw)->execute();
    }

    public function actionDeleteNotificationOld()
    { //Notif more than 360 days or 6 months
        $connection = Yii::app()->db;
        $sqlRaw = "DELETE FROM s_notification WHERE alert_after_date < " . strtotime("-360 day");
        Yii::app()->db->createCommand($sqlRaw)->execute();
    }

    public function actionAutoGeneratedLeave()
    {
        $connection = Yii::app()->db;

        $sqltoday = "select `a`.`id` AS `id`
	    from `g_person` `a`
		where 
        (select	`s`.`status_id` AS `status_id` from `g_person_status` `s` where `s`.`parent_id` = `a`.`id`
            order by `s`.`start_date` desc limit 1) NOT IN (8, 9, 10, 13) AND 

		(select MONTH(`c`.`start_date`) AS `start_date` from `g_person_career` `c`
        where `a`.`id` = `c`.`parent_id` and `c`.`status_id` = 1 order by `c`.`start_date` desc limit 1) = " . date('m') . " AND

		(select DAY(`c`.`start_date`) AS `start_date` from `g_person_career` `c`
        where `a`.`id` = `c`.`parent_id` and `c`.`status_id` = 1 order by `c`.`start_date` desc limit 1) = " . date('d');

        $lists = $connection->createCommand($sqltoday)->queryAll();

        foreach ($lists as $list) {

            $sqlPerson = "
				SELECT g.id,g.employee_name,g.userid, 
				(select l.mass_leave from g_leave l WHERE g.id = l.parent_id AND l.approved_id NOT IN (1,5,6) ORDER BY l.end_date DESC,l.id DESC LIMIT 1) as mass_leave,  
				(select l.person_leave from g_leave l WHERE g.id = l.parent_id AND l.approved_id NOT IN (1,5,6) ORDER BY l.end_date DESC,l.id DESC LIMIT 1) as person_leave,  
				(select l.balance from g_leave l WHERE g.id = l.parent_id AND l.approved_id NOT IN (1,5,6) ORDER BY l.end_date DESC,l.id DESC LIMIT 1) as balance,  
				(select c.start_date from g_person_career c WHERE g.id = c.parent_id AND c.status_id IN (1) ORDER BY c.start_date ASC LIMIT 1) as start_date,  
				(select i.company_id from g_person_career i WHERE g.id = i.parent_id AND i.status_id IN (1, 2, 3, 4, 5, 6, 15) ORDER BY i.start_date DESC LIMIT 1) as company_id  
				FROM g_person g 
				WHERE g.id = " . $list['id'];

            $model = $connection->createCommand($sqlPerson)->queryRow();

            if ($model['mass_leave'] <= -1) {
                $mass_leave = $model['mass_leave'];
            } else
                $mass_leave = 0;

            if ($model['person_leave'] <= -1) {
                $private_leave = $model['person_leave'];
            } else
                $private_leave = 0;

            if ($model['balance'] <= -1) {
                $balance = $model['balance'];
            } else
                $balance = 0;

            $new_mass_leave = Yii::app()->params['currentYearMassLeave'] + $mass_leave;
            $new_private_leave = Yii::app()->params['currentYearPrivateLeave'] + $private_leave;
            $new_balance = 12 + $balance;

            $_md = date('Y') . "-" . date("m", strtotime($model['start_date'])) . "-" . date("d", strtotime($model['start_date']));
            $sql = "insert into g_leave 
			(parent_id, input_date, year_leave , number_of_day, start_date , end_date  , leave_reason  , mass_leave, person_leave, balance, remark, approved_id,superior_approved_id) VALUES 
			(" . $list['id'] . "  ,'" . $_md . "' ,12,12,'" . $_md . "'  ,'" . $_md . "' ,'Auto Generated Leave'," . $new_mass_leave . "," . $new_private_leave . ",
			" . $new_balance . ",'Auto Generated Leave',9,9)";
            $connection->createCommand($sql)->execute();

            $sql2 = "
				INSERT INTO s_notification (`group_id`,`link`,`content`,`expire`,`alert_after_date`,`alert_before_date`,`company_id`,`author_name`)
				VALUES (1,'m1/gLeave/view/id/" . $model['id'] . "',
				'Auto Generated Leave. New Auto Generated Leave has been created for <read>" . $model['employee_name'] . "</read>'," . time() . "," . time() . "," . date(strtotime("1 month")) . ",'" . $model['company_id'] . "','System');
			";
            $command = $connection->createCommand($sql2)->execute();

            if ($model['userid'] != null) {
                $lastId = $connection->createCommand("select conversation_id from s_mailbox_conversation order by conversation_id desc")->queryScalar() + 1;
                $sql3 = "
					INSERT INTO s_mailbox_conversation (`subject`,`initiator_id`,`interlocutor_id`,`modified`,`bm_read`,`conversation_id`) VALUES
					('Auto Generated Leave. New Generated Leave Balance has been created for you',1," . $model['userid'] . "," . time() . ",1," . $lastId . ")
				";
                $command = $connection->createCommand($sql3)->execute();

                $addmessage = ($balance >= 1) ? "You have ".$balance." day(s) leave remain on your last period. Apply Extended Leave now..." : "";

                $sql4 = "
					INSERT INTO s_mailbox_message (`text`,`created`,`sender_id`,`recipient_id`,`crc64`,`conversation_id`) VALUES
					(
					'Dear " . $model['employee_name'] . ",<br/><br/> 
					CONGRATULATION!!! We celebrate today for you join date on this company. And then, you have new Balance Leave that we has just added today. 
                    Your new balance Leave is: " . $new_balance . " day(s) valid from today up to next year.
					Based on company rules, if you still have positive balance on previous period, you can fill and apply extended leave, 
                    ask approval from  by your superior
					and after that it will be added into this current balance. <br/>".$addmessage."<br/>
					Thank You.. <br/><br/>
					APHRIS',
					
					
					" . time() . ",1," . $model['userid'] . ",0," . $lastId . ")
				";
                $command = $connection->createCommand($sql4)->execute();
            }
        }
    }


    public function actionApplicantRating()
    {
        $connection = Yii::app()->db;
        //Rate 1. No Email Address Or Invalid Email
        $sqlRaw = "insert ignore into h_applicant_rating (parent_id, user_id, rating)
					select id,1,1 from h_applicant where email is null";
        Yii::app()->db->createCommand($sqlRaw)->execute();

        //Rate 2. Have Email, no Experience or Education
        $sqlRaw = "insert ignore into h_applicant_rating (parent_id, user_id, rating)
					select a.id,1,2 from h_applicant a
					left join h_applicant_education e on a.id = e.parent_id
					left join h_applicant_experience p on a.id = p.parent_id
					 where a.email is not null and (e.level_id is null or p.company_name is null)";
        Yii::app()->db->createCommand($sqlRaw)->execute();

        //Rate 3. Have Email, Experience, Education but no photo
        $sqlRaw = "insert ignore into h_applicant_rating (parent_id, user_id, rating)
					select a.id,1,3 from h_applicant a
					left join h_applicant_education e on a.id = e.parent_id
					left join h_applicant_experience p on a.id = p.parent_id
					 where a.email is not null and e.level_id is not null and p.company_name is not null and c_pathfoto is null";
        Yii::app()->db->createCommand($sqlRaw)->execute();

        //Rate 4. Have Email, Experience, Education and photo
        $sqlRaw = "insert ignore into h_applicant_rating (parent_id, user_id, rating)
					select a.id,1,4 from h_applicant a
					left join h_applicant_education e on a.id = e.parent_id
					left join h_applicant_experience p on a.id = p.parent_id
					 where a.email is not null and e.level_id is not null and p.company_name is not null and c_pathfoto is not null";
        Yii::app()->db->createCommand($sqlRaw)->execute();
    }

    public function glob_recursive($pattern, $flags = 0)
    {
        $files = glob($pattern, $flags);
        foreach (glob(dirname($pattern) . '/*', GLOB_ONLYDIR | GLOB_NOSORT) as $dir) {
            $files = array_merge($files, $this->glob_recursive($dir . '/' . basename($pattern), $flags));
        }
        return $files;
    }

    public static function sanitize2($string = '', $is_filename = FALSE)
    {
        // Replace all weird characters with dashes
        $string = preg_replace('/[^\w\-' . ($is_filename ? '~_\.' : '') . ']+/u', '', $string);
        $string = preg_replace('/\d+/', '', $string);

        // Only allow one dash separator at a time (and make string lowercase)
        //return mb_strtolower(preg_replace('/--+/u', '-', $string), 'UTF-8');
        return $string;
    }

    public static function read_doc_file($filename) {

        //echo "test";
        //die;
        if(file_exists($filename))
        {
            if(($fh = fopen($filename, 'r')) !== false ) 
            {
               $headers = fread($fh, 0xA00);

               // 1 = (ord(n)*1) ; Document has from 0 to 255 characters
               $n1 = ( ord($headers[0x21C]) - 1 );

               // 1 = ((ord(n)-8)*256) ; Document has from 256 to 63743 characters
               $n2 = ( ( ord($headers[0x21D]) - 8 ) * 256 );

               // 1 = ((ord(n)*256)*256) ; Document has from 63744 to 16775423 characters
               $n3 = ( ( ord($headers[0x21E]) * 256 ) * 256 );

               // 1 = (((ord(n)*256)*256)*256) ; Document has from 16775424 to 4294965504 characters
               $n4 = ( ( ( ord($headers[0x21F]) * 256 ) * 256 ) * 256 );

               // Total length of text in the document
               $textLength = ($n1 + $n2 + $n3 + $n4);

               $extracted_plaintext = fread($fh, $textLength);

               // simple print character stream without new lines
               //echo $extracted_plaintext;

               // if you want to see your paragraphs in a new line, do this
               return nl2br($extracted_plaintext);
               // need more spacing after each paragraph use another nl2br
            }
        }   
    }

    public static function read_xls_file($filename) {

        $text = '';
        if(file_exists($filename)) {
            Yii::import('ext.phpexcelreader.JPhpExcelReader');
            $reader = new JPhpExcelReader($file);
            foreach ($reader->sheets as $k => $data) {
                foreach ($data['cells'] as $r => $row) {
                   $text .=  $row ." ";
                }
            }
        }
        return $text;

    }

    public function actionDocumentIndex() {
        require_once('Zend/Search/Lucene.php');
        require_once('Zend/Pdf.php');

        $index = new Zend_Search_Lucene(Yii::getPathOfAlias('application.' . $this->_indexFiles), true);
        $path = Yii::app()->basePath . "/../sharedocs/companydocuments";
        $supportedExts = ['docx', 'xlsx', 'pptx', 'txt', 'pdf','doc','xls'];

        foreach ($supportedExts as $supportedExt) {
            $globOut = $this->glob_recursive($path . '/' . '*.' . $supportedExt);
            foreach ($globOut as $longpath) {
                $longPath = explode("/", $longpath);
                $ext = explode(".", end($longPath));
                if ($ext[1] === "docx" || $ext[1] === "DOCX") {
                    try {
                        $doc = Zend_Search_Lucene_Document_Docx::loadDocxFile($longpath);
                    } catch (Exception $e) { 
                        echo $e->getMessage();
                        die('ERROR: ' . $e->getMessage());
                    }
                    $body = $doc->body;
                    $created = $doc->created;
                    $modified = $doc->modified;
                } elseif ($ext[1] === "xlsx" || $ext[1] === "XLSX") {
                    try {
                        $doc = Zend_Search_Lucene_Document_Xlsx::loadXlsxFile($longpath);
                    } catch (Exception $e) { 
                        echo $e->getMessage();
                        die('ERROR: ' . $e->getMessage());
                    }
                    $body = $doc->body;
                    $created = $doc->created;
                    $modified = $doc->modified;
                } elseif ($ext[1] === "pptx" || $ext[1] === "PPTX") {
                    try {
                        $doc = Zend_Search_Lucene_Document_Pptx::loadPptxFile($longpath);
                    } catch (Exception $e) { 
                        echo $e->getMessage();
                        die('ERROR: ' . $e->getMessage());
                    }
                    $body = $doc->body;
                    $created = $doc->created;
                    $modified = $doc->modified;
                } elseif ($ext[1] === "pdf" || $ext[1] === "PDF") {
                    $pdfParse = new PdfParser;
                    try {
                        $pdf = Zend_Pdf::load($longpath);
                        $indexValues = $pdfParse->pdf2txt($pdf->render());
                        $doc = new Zend_Search_Lucene_Document($indexValues);
                    } catch (Exception $e) { 
                        echo $e->getMessage();
                        die('ERROR: ' . $e->getMessage());
                    }
                    $body = $this->sanitize2($indexValues);
                    $created = $pdf->properties['CreationDate'];
                    $modified = $pdf->properties['CreationDate'];
                } elseif ($ext[1] === "doc" || $ext[1] === "DOC") {
                    try {
                        $indexValues = $this->read_doc_file($longpath);
                        $doc = new Zend_Search_Lucene_Document($indexValues);
                    } catch (Exception $e) { 
                        echo $e->getMessage();
                        die('ERROR: ' . $e->getMessage());
                    }
                    $body = $this->sanitize2($indexValues);
                    $created = '';
                    $modified = '';
                } elseif ($ext[1] === "txt" || $ext[1] === "TXT") {
                    try {
                        $txt = file_get_contents($longpath);
                        $doc = new Zend_Search_Lucene_Document($txt);
                    } catch (Exception $e) { 
                        echo $e->getMessage();
                        die('ERROR: ' . $e->getMessage());
                    }
                    $body = $txt;
                    $created = 'N.A.';
                    $modified = 'N.A.';
                }
                $doc->addField(Zend_Search_Lucene_Field::UnStored('body', $body, 'utf-8'));
                $doc->addField(Zend_Search_Lucene_Field::Text('created', $created, 'utf-8'));
                $doc->addField(Zend_Search_Lucene_Field::Text('modified', $modified, 'utf-8'));
                $doc->addField(Zend_Search_Lucene_Field::Text('filename', $ext[0] . "." . $ext[1]));
                $doc->addField(Zend_Search_Lucene_Field::Text('longpath', $longpath));
                $doc->addField(Zend_Search_Lucene_Field::UnIndexed('indexTime', time()));
                $index->addDocument($doc);
                $index->commit();
                echo $longpath;
            }
        }
    } 

    public function actionErrorOne()
    {

        $connection = Yii::app()->db;
        $sqlRaw = "
            select m.conversation_id, g.email, c.subject, m.text, gg.employee_name, gg.email as email_sender, m.sender_id  from s_mailbox_message m
            inner join s_mailbox_conversation c on  c.conversation_id = m.conversation_id
            inner join s_user u on  m.recipient_id = u.id
            inner join g_person g on  g.userid = u.id
            left join s_user uu on  m.sender_id = uu.id
            left join g_person gg on  gg.userid = uu.id
            where c.bm_sent = 0 and (g.email is not null or length(g.email) <>0)
            order by g.email
        ";

        //FOR TESTING ONLY
        //$sqlRaw = "
        //  select m.conversation_id, 'peterjkambey@gmail.com' as email,'test subject ' 
        //  as subject, m.text from s_mailbox_message m order by conversation_id DESC  limit 1
        //";

        $rawData = $connection->createCommand($sqlRaw)->queryAll();
        Yii::import('EmailComponent');

        foreach ($rawData as $row) {

            $subject = $row['subject'];

            $email = $row['email'];

            if ($row['sender_id'] == 1) {
                $text = "ADMIN APHRIS";
            } else
                $text = $row['employee_name'] . " ( " . $row['email_sender'] . " )";

            $text .= ' has send you a message with this following detail:<br/><br/><br/>';

            $text .= $row['text'];

            $body = EmailComponent::template('template002', $text);

            if (!in_array($email, require(dirname(__FILE__) . '/../config/blacklistEmail.php')) && filter_var($email, FILTER_VALIDATE_EMAIL))
                EmailComponent::sendEmail($email, $subject, $body);

            $sql2 = "UPDATE s_mailbox_conversation SET bm_sent = 1 WHERE conversation_id = " . $row['conversation_id'];
            Yii::app()->db->createCommand($sql2)->execute();

            //echo "sukses";
        }

    }    
}


